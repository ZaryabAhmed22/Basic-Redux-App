1. Created a simple redux store, but without any subscriber. Export the store as default

2. To provide the store, import the Provider component form the react-redux library and wrap the whole <App /> by the <Provider></Provider>.

3. Pass in store prop to the provider to indicate the Provider which store to provide i.e <Provider store={storeCreated}></Provider>.

>> USING STORE IN A COMPONENT
4. Make use of the useSelector() hook from "react-redx" library
useSelector() is used to get a chunk of state from the store.

5. The useSelector() reuires an arrow function that uses state(coming from the redux store) as a parameter and takes out the wanted peice of state. 

6. To dispatch the action, we will use another react-redux hook, useDispatch(). This hook return a function so we can store the it into a vatiable i.e const disptachFunction = useDispatch()

7. Call the dispatch function in the desired place with the object parameter that specifies the tpye of actions.  

>> REDUX WITH CLASS BASED COMPONENTS
8. Makes use of the connect form react-redux library.

9. connect is a higher order component. When it executes, it returns a function, that then takes in our Class Component as an argument to execute

10. connect() takes in 2 parameters and bot are functions
i)- First function maps redux state to props which will be recieved in the Component. It recieves state(comming from the redux store) and returns ab object, where keys will be used as props, and the values are the logic.

ii)- The second function which is normally named as mapDisparchToProps(), is equivalent to usign disptach. Used to store disptach function to props. When this function is executed, it sends dispatch to the redux store. It recieves dispatch function as an argument and retuns an object in which keys are the props and values call the dispatch function and set up our actions.

>> ACTION PAYLOADS
11. We can pass other keys in dispatch other than only "actionc.type", we can pass any key to use it rather than hard coding it in our reducer logiic.

>> MULTIPLE STATES
12. To deal with multiple states we can set other key-value pairs in our initial state.

>> CORRECT WAY TO INTEREACT STATE
- The state object we return in the reducer overwrites the previous state rather than editing.
- Never directly mutate tthe state, never change the existing state. Becuase objects and arrays are reference types, it's easy to over wrtie them.

///////// REDUX TOOLKIT /////////
>> CREATING STATE SLICES
1. Import the createSlice() from toolkit.

2. createSlice() takes in an object parameter with 3 keys.
i) name of the slice
ii) initial state
iii) reducers object which contain all the methods(actions)

3. There's no need of if checks since the createSlice() automatically calls different reducer methods according to the  situation.

4. In these reducer maps we are allowed to mutate the state. >> Using tool kit we can't acceidentaly mutate the existing state becuase the redux toolkit uses another package known as Emer which detects the code which is mutating the state, creates a clone of the state and turns it into immutable code.

5. To make use of the state slice, store the created slice into a variable.

6. Then, inside the createStore, pass the sliceName.reducer for example createStore(counterSlice.reducer). BUT, in large applications, there may be alot of reducers, and combining them is very difficult with createStore, therefore we use configureStore() from redux-toolkit.

7. >> configureStore()
- takes in an object with an expected key "reducer" and the value assigned to this reducer would be the sliceName.reducer, or if there are multiple reducers, we can pass another object as value for "reducer key, in which we can give name to our reducers and pass the reducers as the value(in the key value pair). The configureStore() conbines all the reducers into one single global reducer.

>> const store = configureStore({
  reducer: counterSlice.reducer,
});

>> const store = configureStore({
  reducer: {
  counter: counterSlice.reducer
  name: nameSlice.reducer
  }
});